Here's a complete Student Registration & Application Form built with React. It will allow students to register themselves by entering details like name, age, email, course selection, and additional information like reason for applying.

‚úÖ Features:
Student registration form

Validations for required fields

Submission handling (logs form data)

Neatly structured React components

üóÇÔ∏è Project Structure
pgsql
Copy
Edit
student-registration/
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ RegistrationForm.js
‚îÇ   ‚îú‚îÄ‚îÄ App.js
‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ   ‚îî‚îÄ‚îÄ styles.css
1Ô∏è‚É£ RegistrationForm.js
jsx
Copy
Edit
// src/components/RegistrationForm.js
import { useState } from "react";
import "./RegistrationForm.css";

const RegistrationForm = () => {
  const [formData, setFormData] = useState({
    name: "",
    age: "",
    email: "",
    course: "",
    reason: ""
  });

  const [submitted, setSubmitted] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (formData.name && formData.age && formData.email && formData.course) {
      console.log("Submitted Data:", formData);
      setSubmitted(true);
    } else {
      alert("Please fill all required fields.");
    }
  };

  return (
    <div className="form-container">
      <h2>Student Registration Form</h2>
      {submitted ? (
        <p>‚úÖ Registration submitted successfully!</p>
      ) : (
        <form onSubmit={handleSubmit}>
          <input name="name" placeholder="Full Name" onChange={handleChange} value={formData.name} required />
          <input name="age" type="number" placeholder="Age" onChange={handleChange} value={formData.age} required />
          <input name="email" type="email" placeholder="Email" onChange={handleChange} value={formData.email} required />
          <select name="course" onChange={handleChange} value={formData.course} required>
            <option value="">Select Course</option>
            <option value="Computer Science">Computer Science</option>
            <option value="Mathematics">Mathematics</option>
            <option value="Business">Business</option>
          </select>
          <textarea name="reason" placeholder="Why do you want to join?" onChange={handleChange} value={formData.reason} />
          <button type="submit">Register</button>
        </form>
      )}
    </div>
  );
};

export default RegistrationForm;
2Ô∏è‚É£ App.js
jsx
Copy
Edit
// src/App.js
import RegistrationForm from "./components/RegistrationForm";
import "./styles.css";

function App() {
  return (
    <div className="App">
      <RegistrationForm />
    </div>
  );
}

export default App;
3Ô∏è‚É£ index.js
jsx
Copy
Edit
// src/index.js
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);
4Ô∏è‚É£ styles.css
css
Copy
Edit
body {
  font-family: Arial, sans-serif;
  padding: 20px;
  background-color: #f0f4f8;
}

.form-container {
  background-color: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

form {
  display: flex;
  flex-direction: column;
}

input, select, textarea {
  margin-bottom: 10px;
  padding: 10px;
  font-size: 1rem;
}

button {
  padding: 10px;
  background-color: #0077cc;
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: #005fa3;
}
üöÄ Next Steps
Would you like this to be connected to a backend (MongoDB) so the submitted data can be stored? I can also provide:

Email validation

Real-time error messages

Success page redirection

Backend API integration

Let me know what to add next!
